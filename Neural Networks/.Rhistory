q()
train = read.csv("C:\Users\Jianghui\Desktop\BreastCancer\Neural Networks\train.csv"
pwd
getwd
getwd()
help(read.csv)
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
train
class(train)
names(train)
nrow(train)
ncol(train)
?neuralnet
library("neuralnet")
?neuralnet
net.sqrt <- neuralnet(Class~Thickness Size Shape Adhesion Epithelial Nuclei Bland Nucleoli Mitoses,train, hidden=10, threshold=0.01)
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train, hidden=10, threshold=0.01)
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train[,2:11], hidden=10, threshold=0.01)
ncol(train[,2:11])
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train[,2:11], hidden=10, threshold=0.01)
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
class(trainingdata)
ncol(trainingdata)
nrow(trainingdata)
trainingdata
train
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train[,2:11], hidden=10, threshold=0.01)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
train = train[:,2-:10]
train = train[,2-:10]
train = train[,2:11]
dim(train)
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train, hidden=10, threshold=0.01)
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,train[1:20,], hidden=10, threshold=0.01)
train = train[is.na(train$Nucleitrain = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE),2:11]
data = train[is.na(train$Nuclei,2:11]
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
data = train[is.na(train$Nuclei),2:11]
dim(data)
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
data = train[!is.na(train$Nuclei),2:11]
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
data = train[!is.na(train$Nuclei),2:11]
dim(data)
print(net.sqrt)
plot(net.sqrt)
1
plot(net.sqrt)
plot(net.sqrt)
plot(net.sqrt)
test = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/test.csv", header = TRUE)
valid = test[!is.na(test$Nuclei),2:11]
dim(valid)
predict <- compute(net.sqrt, valid)
predict = compute(net.sqrt, valid)
valid = test[!is.na(test$Nuclei),2:10]
dim(valid)
predict = compute(net.sqrt, valid)
net.results = compute(net.sqrt, valid)
#Lets see what properties net.sqrt has
ls(net.results)
net.results
ls(net.results)
plot(net.sqrt)
cleanoutput <- cbind(test$Nuclei, as.data.frame(net.results$net.result))
cleanoutput <- cbind(test$Nuclei !=NA, as.data.frame(net.results$net.result))
test[!is.na(train$Nuclei),11]
test[!is.na(test$Nuclei),2:10]
test[!is.na(test$Nuclei),11]
cleanoutput <- cbind(test[!is.na(test$Nuclei),11], as.data.frame(net.results$net.result))
print(cleanoutput)
clear()
#install.packages('neuralnet')
library("neuralnet")
?neuralnet
#read train and test data
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
data = train[!is.na(train$Nuclei),2:11]
dim(data)
test = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/test.csv", header = TRUE)
valid = test[!is.na(test$Nuclei),2:10]
dim(valid)
#fit the neural network model
fit <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,data, hidden=10, threshold=0.01)
print(fit)
net.sqrt <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,data, hidden=10, threshold=0.01)
print(fit)
fit <- neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,data, hidden=10, threshold=0.01)
plot(fit)
print(fit)
test <- cbind(test[!is.na(test$Nuclei),11], as.data.frame(predict$net.result))
predict = compute(fit, valid)
predict
test
ls(predict)
predict = compute(fit, data)
predict = compute(fit, data[,1:9])
train_results = cbind(data[,10], as.data.frame(predict$net.result))
train_results
names(train_results)
colnames(train_results) <- c("class","predict")
names(train_results)
train_results$dec = as.numeric(with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE)))
names(train_results)
lift = aggregate(train_results$class, by=list(decile=train_results$dec), FUN = "mean")
lfit
lift
#create liftchart
train_results$dec = as.numeric(with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE)))
lift = aggregate(train_results$class, by=list(decile=train_results$dec), FUN = "mean")
bad = aggregate(train_results$class, by=list(decile=train_results$dec), FUN = "sum")
good = c(table(train_results$dec)) - bad[,2]
goodbad = data.frame(decile=1:5, bad = bad[,2], good)
#create function to calculate Somers'D
SD = function(goodbad) {
   A = abs(0.5*sum((c(0,cumsum(goodbad$bad)[1:4])/sum(goodbad$bad) + (cumsum(goodbad$bad)/sum(goodbad$bad)))*
      (cumsum(goodbad$good)/sum(goodbad$good) - c(0,cumsum(goodbad$good)[1:4])/sum(goodbad$good)))-0.5)/0.5
   return(A)
}
SD(goodbad)
names(lift)
plot(lift,type="b",pch=16,ylim=c(0,max(lift$x)+0.01),main=paste("Liftchart - All Vars \nSomer'S D = ",round(SD(goodbad),4)),xlab = "Qintiles",ylab = 'Average prediction')
plot(lift,type="b",pch=16,ylim=c(0,max(lift$x)+0.01),main=paste("Liftchart \nSomer'S D = ",round(SD(goodbad),4)),xlab = "Qintiles",ylab = 'Average prediction')
with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE))
a = 1:10
with(a, cut(a, breaks=c(0,0.1,1),include.lowest=TRUE))
with(train_results, cut(predict, breaks=c(0,0.1,1),include.lowest=TRUE))
predict
predict
predict$net.result
predict$net.result
with(train_results, cut(predict$net.result, breaks=c(0,0.1,1),include.lowest=TRUE))
with(predict$net.result, cut(predict$net.result, breaks=c(0,0.1,1),include.lowest=TRUE))
with(train_results, cut(predict, breaks=c(0,0.1,1),include.lowest=TRUE))
with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE))
with(train_results, cut(predict, breaks=c(-1,0.1,1),include.lowest=TRUE))
with(train_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE))
names(train_result)
names(train_results)
train_results$dec = as.numeric(with(train_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE)))
train_results$dec = as.numeric(with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE)))
train_results$c_hat = as.numeric(with(train_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE)))
table(train_results$dec)
c(table(train_results$dec))
xtab(~class+c_hat,train_results)
xtabs(~class+c_hat,train_results)
xtabs(~c_hat+class,train_results)
colnames(test_results) <- c("class","predict")
colnames(test_results) <- c("class","predict")
# apply model to test data
predict = compute(fit, valid)
ls(predict)
test_results = cbind(test[!is.na(test$Nuclei),11], as.data.frame(predict$net.result))
colnames(test_results) <- c("class","predict")
predict = compute(fit, valid)
ls(predict)
test_results = cbind(test[!is.na(test$Nuclei),11], as.data.frame(predict$net.result))
names(test)
test = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/test.csv", header = TRUE)
valid = test[!is.na(test$Nuclei),2:10]
dim(valid)
train_results = cbind(data[,10], as.data.frame(predict$net.result))
names(test)
predict = compute(fit, data[,1:9])
nrow(predict)
predict
nrow(predict)
ncol(predict)
names(predict)
nrow(predict$net.result)
predict = compute(fit, valid)
nrow(predict$net.result)
test_results = cbind(test[!is.na(test$Nuclei),11], as.data.frame(predict$net.result))
colnames(test_results) <- c("class","predict")
test_results$c_hat = as.numeric(with(test_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE)))
xtabs(~c_hat+class,test_results)
#read train and test data
train = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/train.csv", header = TRUE)
data = train[!is.na(train$Nuclei),2:11]
dim(data)
test = read.csv("C:/Users/Jianghui/Desktop/BreastCancer/test.csv", header = TRUE)
valid = test[!is.na(test$Nuclei),2:10]
dim(valid)
#fit the neural network model
fit = neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,data, hidden=10, threshold=0.01)
print(fit)
#fit the neural network model
fit = neuralnet(Class ~ Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses,data, hidden=10, threshold=0.01)
print(fit)
#Plot the neural network
plot(fit)
# apply model to test data
predict = compute(fit, valid)
ls(predict)
test_results = cbind(test[!is.na(test$Nuclei),11], as.data.frame(predict$net.result))
colnames(test_results) <- c("class","predict")
#apply model to train data
predict = compute(fit, data[,1:9])
train_results = cbind(data[,10], as.data.frame(predict$net.result))
colnames(train_results) <- c("class","predict")
#create liftchart
train_results$dec = as.numeric(with(train_results, cut(predict, breaks=quantile(train_results$predict,seq(0,1,0.2)),include.lowest=TRUE)))
lift = aggregate(train_results$class, by=list(decile=train_results$dec), FUN = "mean")
bad = aggregate(train_results$class, by=list(decile=train_results$dec), FUN = "sum")
good = c(table(train_results$dec)) - bad[,2]
goodbad = data.frame(decile=1:5, bad = bad[,2], good)
#create function to calculate Somers'D
SD = function(goodbad) {
   A = abs(0.5*sum((c(0,cumsum(goodbad$bad)[1:4])/sum(goodbad$bad) + (cumsum(goodbad$bad)/sum(goodbad$bad)))*
      (cumsum(goodbad$good)/sum(goodbad$good) - c(0,cumsum(goodbad$good)[1:4])/sum(goodbad$good)))-0.5)/0.5
   return(A)
}
SD(goodbad)
plot(lift,type="b",pch=16,ylim=c(0,max(lift$x)+0.01),main=paste("Liftchart \nSomer'S D = ",round(SD(goodbad),4)),xlab = "Qintiles",ylab = 'Average prediction')
#tabulate results
train_results$c_hat = as.numeric(with(train_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE)))
xtabs(~c_hat+class,train_results)
test_results$c_hat = as.numeric(with(test_results, cut(predict, breaks=c(-1,0.1,1.2),include.lowest=TRUE)))
xtabs(~c_hat+class,test_results)
save.image()
save.image()
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/test.txt", sep=",")
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/test.txt", sep=",",col.names = False)
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/test.txt", sep=",",col.names = FALSE)
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/test.txt", sep=",", row.names = FALSE,col.names = FALSE)
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/Neural Networks/test.txt", sep=",", row.names = FALSE,col.names = FALSE)
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/Neural Networks/train.txt", sep=",", row.names = FALSE,col.names = FALSE)
write.table(test, "C:/Users/Jianghui/Desktop/BreastCancer/Neural Networks/test.txt", sep=",", row.names = FALSE,col.names = FALSE)
write.table(train, "C:/Users/Jianghui/Desktop/BreastCancer/guide/train.txt", sep=",", row.names = FALSE,col.names = FALSE)
write.table(test, "C:/Users/Jianghui/Desktop/BreastCancer/guide/test.txt", sep=",", row.names = FALSE,col.names = FALSE)
save(test, "C:/Users/Jianghui/Desktop/BreastCancer/guide/test.RData")
save(test, file = "C:/Users/Jianghui/Desktop/BreastCancer/guide/test.RData")
names(test)
# Basic Scatterplot Matrix
pairs(~Thickness+Size+Shape+ Adhesion+ Epithelial + Nuclei+ Bland +Nucleoli+ Mitoses+Class,data=train, 
   main="Simple Scatterplot Matrix")
plot(lift,type="b",pch=16,ylim=c(0,max(lift$x)+0.01),main=paste("Liftchart \nSomers'D = ",round(SD(goodbad),4)),xlab = "Qintiles",ylab = 'Average prediction')
plot(lift,type="b",pch=16,ylim=c(0,max(lift$x)+0.01),main=paste("Liftchart \nSomers'D = ",round(SD(goodbad),4)),xlab = "Qintiles",ylab = 'Malignant Rate')
q()
